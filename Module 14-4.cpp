/*Задание 4. Умножение матрицы на вектор
Реализуйте частный случай умножения матрицы на матрицу, а именно умножение вектора на матрицу.
Эта операция распространена в компьютерной индустрии в целом и в компьютерной графике в частности, поэтому это будет хорошим упражнением.

Итак, у нас есть четырёхкомпонентный вектор b, представленный с помощью массива, и матрица a размером 4 × 4, представленная в виде двумерного массива.
Их произведением будет новый четырёхэлементный вектор c. Его компоненты будут суммой произведений элемента вектора b на строку матрицы a.
Индекс столбца при этом равен индексу соответствующей компоненты вектора b, который мы и рассчитываем.

Все входные данные, матрица a и вектор b вносятся из пользовательского ввода.
Итоговый вектор c надо вывести в консоль (std::cout). Тип данных элементов — всегда float. Желательно реализовать этот алгоритм с помощью вложенного цикла на умножение колонки.

Советы и рекомендации
Во внутреннем цикле потребуется аккумулятор, накапливающий значение очередной ячейки результирующего вектора. Каждый раз не забывайте его обнулять до начала расчётов.*/

#include <iostream>

//размерность матрицы и вектора
const int n = 4;

int main() {
	float A[n][n];
	float B[n];
	float C[n];

	//инициализация и вывод матрицы А в консоль
	std::cout << "A" << std::endl;
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			A[i][j] = 1.0 * i;
			std::cout << A[i][j] << " ";
		}
		std::cout << std::endl;
	}

	//инициализация и вывод вектора B в консоль
	std::cout << "B" << std::endl;
	for (int i = 0; i < n; ++i) {
		B[i] = (float)1;
		std::cout << B[i] << " ";
	}
	std::cout << std::endl;


	//умножаем вектор на матрицу и выводим в консоль
	float summ = 0.0;
	std::cout << "C" << std::endl;
	for (int i = 0; i < n; ++i) {
		for (int j = i + 1; j < n; ++j) {
			summ += A[i][j] * B[i];
		}
		C[i] = summ;
		std::cout << C[i] << " ";
		summ = 0.0;
	}
}